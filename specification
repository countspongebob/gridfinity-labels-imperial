# 3D Printable Parts Bin Label Generator - IMPERIAL SPECIFICATION v16

## Overview
A parametric OpenSCAD-based system for generating customizable 3D printable labels for parts storage bins. This specification covers Imperial hardware (machine screws #4-40 through 1"-12) with multi-color 3D printing support, fractional length dropdown interface, and natural language prompt-based multi-label generation.

## Core Requirements

### 1. Label Physical Specifications
- **Base Dimensions**: Configurable length based on units (1-3 units: 35.8mm, 77.8mm, 119.8mm), fixed width 11.5mm
- **Height**: 0.8mm base with 0.2mm raised text/icons (or 0.01mm flush text)
- **Material**: Single or dual-color 3D printing support
- **Mounting**: 1.5mm diameter holes at each end for attachment
- **Edge Treatment**: Rounded corners with configurable radius (default 0.9mm) and chamfered top/bottom edges (default 0.2mm)

### 2. Imperial Thread Specifications
**Machine Screw Threads (Priority Order)**:
- **Coarse**: #4-40, #5-40, #6-32, #8-32, #10-24, #12-24
- **Fine**: #4-48, #5-44, #6-40, #8-36, #10-32, #12-28

**Fractional Threads**:
- **UNC (Coarse)**: 1/4-20, 5/16-18, 3/8-16, 7/16-14, 1/2-13, 9/16-12, 5/8-11, 3/4-10, 7/8-9, 1-8
- **UNF (Fine)**: 1/4-28, 5/16-24, 3/8-24, 7/16-20, 1/2-20, 9/16-18, 5/8-18, 3/4-16, 7/8-14, 1-12

### 3. Fractional Length System
**Dropdown Interface**: User selects from predefined fractional lengths
- **3/8" to 2"**: Increments of 1/8" (3/8, 1/2, 5/8, 3/4, 7/8, 1, 1-1/8, 1-1/4, 1-3/8, 1-1/2, 1-5/8, 1-3/4, 1-7/8, 2)
- **2-1/4" to 8"**: Increments of 1/4" (2-1/4, 2-1/2, 2-3/4, 3, 3-1/4, 3-1/2, 3-3/4, 4, 4-1/4, 4-1/2, 4-3/4, 5, 5-1/4, 5-1/2, 5-3/4, 6, 6-1/4, 6-1/2, 6-3/4, 7, 7-1/4, 7-1/2, 7-3/4, 8)
- **Total**: 38 fractional options

### 4. Hardware Component Types
**Bolts & Screws**:
- Phillips head bolt, Socket head bolt, Hex head bolt, Button head bolt, Torx head bolt
- Phillips/Torx/Socket head countersunk
- Phillips/Torx wood screws
- Wall anchors, Heat set inserts

**Fasteners**:
- Standard nuts, Lock nuts
- Standard washers, Spring washers

### 5. Display Text Generation
**CRITICAL REQUIREMENT**: Single source of truth for display text generation to prevent inconsistencies.

**Primary Path**: Direct use of dropdown string values
```
display_text = str(thread_spec, " x ", length_fraction)
// Example: "#4-40 x 3/4"
```

**Prohibited**: Multiple conversion paths that could show decimals instead of fractions
- ❌ Convert fraction → decimal → back to fraction
- ✅ Use original dropdown strings directly

**Text Format Standards**:
- No quotation marks in printed output (`"` symbols prohibited)
- Machine screws: `#8-32 x 1/2`
- Fractional: `1/4-20 x 3/4`
- Nuts/washers: Thread specification only (`#8-32`, `1/4-20`)

### 6. Icon Generation System
**Dimensional Scaling**: Icons scale proportionally with length_mm converted from fractional inches
- **Conversion**: `length_mm = length_inches * 25.4`
- **Maximum Display Length**: `20 * label_units` (prevents overflow)
- **Long Bolt Handling**: Split stem with gap for bolts exceeding max length

**Icon Types**:
- **Phillips**: Cross pattern in circular head
- **Socket/Hex**: Geometric drive patterns (hexagonal)
- **Torx**: Six-pointed star pattern
- **Button**: Domed head profile
- **Countersunk**: Tapered head profile
- **Wood Screws**: Pointed tip extension
- **Nuts**: Hexagonal profile with thread indication
- **Washers**: Ring profile with thickness indicator

### 7. Multi-Label Generation
**Natural Language Processing**: Parse user prompts for batch label creation
```
"Create socket head bolt labels: 1/4-20 x 1/2, 3/4, 1 inch and #8-32 x 1/2, 3/4 inch. 
Generate nuts: 1/4-20, #8-32, #10-24. Make washers for same sizes."
```

**Parser Requirements**:
- Recognize thread specifications (machine screw and fractional)
- Extract length ranges and series
- Support both fine and coarse thread specifications
- Generate proper fractional display text
- Handle mixed hardware types in single prompt

### 8. User Interface Parameters
**Single Label Mode**:
- `hardware_type`: Dropdown of all supported component types
- `thread_spec`: Ordered dropdown (machine screws first, then fractional)
- `length_fraction`: Dropdown of 38 fractional options (3/8" to 8")
- `custom_display_text`: Override field for special cases

**Multi-Label Mode**:
- `enable_multi_label`: Boolean toggle
- `multi_label_prompt`: Natural language text input

**Visual Properties**:
- `label_units`: Size selection (1=Small, 2=Medium, 3=Large)
- `base_color`/`content_color`: Hex color values for dual-color printing
- `text_mode`: Raised (0.2mm) or Flush (0.01mm) text
- `export_mode`: Complete, Base only, or Content only

### 9. Code Architecture Requirements
**Data Consistency**:
- **Single Source Principle**: All display text must derive from dropdown string values
- **No Decimal Conversion**: Avoid converting fractional strings to decimal then back
- **Parameter Validation**: Ensure dropdown selections map correctly to internal calculations

**Modular Design**:
- Separate icon generation modules for each hardware type
- Unified text rendering system
- Parametric label base with configurable dimensions
- Centralized fractional-to-decimal conversion for internal calculations only

**Function Separation**:
```
fraction_to_decimal(string) → decimal  // For internal calculations only
render_text(string) → 3D text         // Uses string values directly
generate_display_text() → DEPRECATED   // Avoid multiple conversion paths
```

### 10. Quality Assurance
**Dimensional Accuracy**: All measurements converted to millimeters for consistent internal calculations
- Thread specifications remain as strings for display
- Length calculations use converted millimeter values
- Icon scaling uses millimeter measurements

**Print Compatibility**:
- Minimum feature size: 0.4mm (nozzle width compatibility)
- No overhangs >45° without support
- Clean STL export without non-manifold surfaces

**Multi-Color Registration**: Perfect alignment between base and content layers
- Shared coordinate system
- Consistent Z-height references
- No gaps or overlaps in dual-color printing

### 11. Error Prevention
**Common Pitfalls to Avoid**:
1. **Multiple Display Text Paths**: Always use dropdown strings directly
2. **Decimal Display**: Never show "0.75" instead of "3/4"
3. **Thread Order**: Machine screws (#4-40) before fractional (1/4-20)
4. **Quotation Marks**: Remove all `\"` from display text generation
5. **Inconsistent Parameters**: Ensure variable names match between functions

**Validation Requirements**:
- Verify fractional dropdown values convert correctly to millimeters
- Test that all 38 length options generate proper display text
- Confirm thread specification ordering in dropdown
- Validate icon scaling across full length range

### 12. Example Multi-Label Prompts
```
Create socket head bolt labels: 1/4-20 x 1/2, 3/4, 1 inch and #8-32 x 1/2, 3/4 inch.

Generate complete fastener set:
- Button head bolts: 1/4-20 x 5/8, 3/4, 1 inch
- Nuts: 1/4-20, #8-32, #10-24
- Washers: 1/4-20, #8-32, #10-24

Make precision hardware:
- Socket head bolts (fine thread): 1/4-28 x 1/2, 3/4
- Machine screws (coarse): #8-32 x 5/8, 3/4
- Machine screws (fine): #8-36 x 1/2, 5/8
```

### 13. Version Control
**v16 Enhancements**:
- Fractional length dropdown interface (38 options)
- Single source of truth for display text generation
- Eliminated decimal display issues
- Preserved v15 thread ordering and quotation mark fixes

**Critical Fixes Maintained**:
- Thread specification priority order (machine screws first)
- Quotation mark removal from all display text
- Consistent parameter naming across functions

## Implementation Considerations
- Prioritize dropdown string values over calculated values for display
- Implement comprehensive prompt parsing with error recovery
- Use OpenSCAD's parametric capabilities for maximum flexibility
- Optimize rendering performance for large multi-label operations
- Support future Imperial hardware types through extensible architecture
- Maintain backward compatibility with existing label designs

This specification ensures robust Imperial hardware label generation with user-friendly fractional interfaces and prevents common implementation pitfalls through clear architectural guidelines.
