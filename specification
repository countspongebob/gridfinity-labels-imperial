# 3D Printable Parts Bin Label Generator - IMPERIAL SPECIFICATION v20

## AI Assistant Implementation Guide (READ FIRST)

**CRITICAL CONTEXT FOR AI ASSISTANTS:**
You are working with version 20 of a mature, production-tested OpenSCAD label generator. This code has undergone extensive debugging and optimization. Many "obvious improvements" have already been tried and either failed or caused subtle issues.

**BEFORE MAKING ANY CHANGES:**
1. Read the entire "Implementation Notes and Lessons Learned" section at the end of this document
2. Understand that all icon geometries have been carefully calibrated to match physical hardware
3. Know that the button head side view positioning (head_x + 5) is particularly sensitive and correct as-is
4. Be aware that custom text handling for nuts/washers has specific behavior that must be preserved
5. Recognize that $fn values (32 for smooth, 6 for hex) are intentionally chosen

**WHEN ASKED TO MODIFY THIS CODE:**
- Assume the existing code is working correctly unless specifically told otherwise
- Preserve all existing parameter flows, especially display_text through all functions
- Test changes with empty and filled custom_display_text fields
- Ensure nuts/washers show thread spec when custom text is empty
- Never "optimize" the button head side view without explicit request
- Check the Implementation Notes for why certain patterns exist before changing them

**COMMON PITFALLS TO AVOID:**
- Don't change "button_bolt_icon" function name even though UI says "Button head screw"
- Don't modify bolt stem positioning without understanding the icon alignment system
- Don't assume round icons are mistakes - they match physical hardware appearance
- Don't simplify the dual custom text field system - both fields serve different purposes

**IF SUGGESTING IMPROVEMENTS:**
Focus on adding new capabilities rather than "fixing" existing working features. The code prioritizes reliability and print quality over elegance. Any changes should be tested across all hardware types, label sizes, and length options.

---

## Overview
A parametric OpenSCAD-based system for generating customizable 3D printable single labels for parts storage bins. This specification covers Imperial hardware (machine screws #4-40 through 1"-12) with dual-color 3D printing support and fractional length dropdown interface.

## Core Requirements

### 1. Label Physical Specifications
- **Base Dimensions**: Configurable length based on units (1-3 units: 37.8mm, 79.6mm, 113.4mm), fixed width 11.7mm
- **Height**: 0.8mm base with 0.3mm raised text/icons (or 0.01mm flush text)
- **Material**: Single or dual-color 3D printing support
- **Mounting**: Clean solid base with optional side retention tabs
- **Edge Treatment**: Rounded corners with configurable radius (default 2.0mm) and chamfered top/bottom edges (default 0.2mm)
- **Side Tabs** (optional): Triangular retention tabs on left/right sides
  - Configurable count (default 3 per side)
  - Configurable size (default 1.0mm)
  - Equally spaced along label length
  - Help secure label against bin walls
- **Default Colors**: White base (#FFFFFF) with black text/icons (#000000)

### 2. Imperial Thread Specifications
**Thread Specification Ordering**: Dropdown sorted by size (smallest to largest), with coarse threads before fine threads for each size.

**Machine Screw Threads (by ascending size)**:
- **#4**: #4-40 (coarse), #4-48 (fine)
- **#5**: #5-40 (coarse), #5-44 (fine)
- **#6**: #6-32 (coarse), #6-40 (fine)
- **#8**: #8-32 (coarse), #8-36 (fine)
- **#10**: #10-24 (coarse), #10-32 (fine)
- **#12**: #12-24 (coarse), #12-28 (fine)

**Fractional Threads (by ascending diameter)**:
- **1/4"**: 1/4-20 (UNC coarse), 1/4-28 (UNF fine)
- **5/16"**: 5/16-18 (UNC), 5/16-24 (UNF)
- **3/8"**: 3/8-16 (UNC), 3/8-24 (UNF)
- **7/16"**: 7/16-14 (UNC), 7/16-20 (UNF)
- **1/2"**: 1/2-13 (UNC), 1/2-20 (UNF)
- **9/16"**: 9/16-12 (UNC), 9/16-18 (UNF)
- **5/8"**: 5/8-11 (UNC), 5/8-18 (UNF)
- **3/4"**: 3/4-10 (UNC), 3/4-16 (UNF)
- **7/8"**: 7/8-9 (UNC), 7/8-14 (UNF)
- **1"**: 1-8 (UNC), 1-12 (UNF)

**Sorting Logic**: Each diameter group contains coarse thread first (higher number = coarser pitch), followed by fine thread (higher number = finer pitch). This organization allows users to easily find both standard and precision thread options for each fastener size.

### 3. Fractional Length System
**Dropdown Interface**: User selects from predefined fractional lengths
- **1/4" to 2"**: Increments of 1/16" (1/4, 5/16, 3/8, 7/16, 1/2, 9/16, 5/8, 11/16, 3/4, 13/16, 7/8, 15/16, 1, 1-1/16, 1-1/8, 1-3/16, 1-1/4, 1-5/16, 1-3/8, 1-7/16, 1-1/2, 1-9/16, 1-5/8, 1-11/16, 1-3/4, 1-13/16, 1-7/8, 1-15/16, 2)
- **Total**: 29 fractional options covering comprehensive fastener length range

### 4. Hardware Component Types
**Bolts & Screws**:
- Phillips head screw, Socket head bolt, Hex head bolt, Button head screw, Torx head bolt
- Phillips/Torx/Socket head countersunk
- Phillips/Torx wood screws
- Wall anchors, Heat set inserts

**Fasteners**:
- Standard nuts, Lock nuts
- Standard washers, Spring washers

### 5. Batch All Sizes Generation
**Scope**: System can generate complete sets of labels for one hardware type and thread specification across all available lengths
- **Interface**: Toggle to enable batch mode with separate hardware type and thread specification dropdowns
- **Responsive Grid Layout**: Column count adapts to label size to optimize print bed usage
  - Small labels (37.8mm): 6 columns
  - Medium labels (79.6mm): 3 columns  
  - Large labels (113.4mm): 2 columns
- **Spacing**: Minimal 1mm gaps between labels to reduce material waste
- **Coverage**: Automatically generates all 29 fractional lengths (1/4" through 2" in 1/16" increments)
- **Use Case**: Perfect for creating complete label sets for commonly used fastener types (e.g., all sizes of #4-40 Phillips bolts)

### 6. Display Text Generation
**CRITICAL REQUIREMENT**: Single source of truth for display text generation to prevent inconsistencies.

**Primary Path**: Direct use of dropdown string values
```
display_text = str(thread_spec, " x ", length_fraction)
// Example: "#4-40 x 3/4"
```

**Custom Text Override (v16.1 Enhancement)**:
- **`custom_display_text` field**: Allows user to override auto-generated text for any hardware type
- **Nuts and Washers**: When custom text is empty, displays thread specification (e.g., "#4-40")
- **Bolts and Screws**: When custom text is empty, displays full specification (e.g., "#4-40 x 3/4")
- **Custom Override Examples**: User can enter "SAE" or "Metric" or any custom identifier

**Prohibited**: Multiple conversion paths that could show decimals instead of fractions
- ❌ Convert fraction → decimal → back to fraction
- ✅ Use original dropdown strings directly

**Text Format Standards**:
- No quotation marks in printed output (`"` symbols prohibited)
- Machine screws: `#8-32 x 1/2`
- Fractional: `1/4-20 x 3/4`
- Nuts/washers: Thread specification only (`#8-32`, `1/4-20`) or custom text

### 7. Icon Generation System
**Dimensional Scaling**: Icons scale proportionally with length_mm converted from fractional inches
- **Conversion**: `length_mm = length_inches * 25.4`
- **Maximum Display Length**: `20 * label_units` (prevents overflow)
- **Long Bolt Handling**: Stem displays continuously up to max length (no gaps or splits)

**Icon Design Standards (v16.1 Updates)**:

**Top View Icons (Looking down on head)**:
- **Round Heads** (smooth circular outline, $fn=32):
  - Phillips head screw: Round with cross slots
  - Socket head bolt: Round with hexagonal socket
  - Button head screw: Round with hexagonal socket
  - Torx head bolt: Round with star socket
  - All countersunk variants: Round with respective drive pattern
  - Wood screws: Round with drive pattern
  
- **Hexagonal Heads**:
  - Hex head bolt: Hexagonal outline ($fn=6)
  - Standard nut: Hexagonal with smooth circular hole ($fn=32 for hole)
  - Lock nut: Hexagonal with smooth circular hole ($fn=32 for hole)

- **Special Icons**:
  - Standard washer: Simple ring (smooth circles inside and out, $fn=32)
  - Spring washer: Split ring (smooth circles with gap, $fn=32)
  - Wall anchor: Expansion pattern
  - Heat set insert: Knurled pattern indication

**Side View Profiles**:
- **Button head**: Rounded/domed profile
- **Lock nut**: Taller profile with rounded top (nylon insert indication)
- **Countersunk**: Angled taper profile
- **Wood screws**: Pointed tip
- **Standard components**: Straight rectangular profile

### 8. User Interface Parameters
**Single Label Mode**:
- `hardware_type`: Dropdown of all supported component types
- `thread_spec`: Ordered dropdown (machine screws first, then fractional)
- `length_fraction`: Dropdown of 29 fractional options (1/4" to 2")
- `custom_display_text`: Override field for custom text on any hardware type
- `custom_text_only`: Text for "Custom text" hardware type (no icon)

**Batch Mode**:
- `enable_batch_all_sizes`: Toggle for batch generation
- `batch_hardware_type`: Hardware selection for batch
- `batch_thread_spec`: Thread selection for batch

**Visual Properties**:
- `label_units`: Size selection (1=Small 37.8mm, 2=Medium 79.6mm, 3=Large 113.4mm)
- `base_color`: Default white (#FFFFFF), user configurable
- `content_color`: Default black (#000000), user configurable
- `export_mode`: Complete, Base only, or Content only

**Typography Controls**:
- `font_family`: Roboto, Arial, Open Sans, Noto Sans, Liberation Sans
- `font_weight`: Regular, Bold, Light, Medium
- `text_size`: Configurable text size (default 3.5)

**Advanced Settings**:
- `label_width`: 11.7mm
- `label_thickness`: 0.8mm
- `corner_radius`: 2.0mm
- `edge_chamfer`: 0.2mm
- `raised_height`: 0.3mm
- `enable_side_tabs`: false (toggle for retention tabs)
- `tab_size`: 1.0mm (triangular tab projection)
- `tab_count`: 3 (tabs per side)

### 9. Code Architecture Requirements
**Data Consistency**:
- **Single Source Principle**: All display text must derive from dropdown string values
- **Custom Text Handling**: Properly pass and use custom_display_text through all functions
- **Parameter Validation**: Ensure dropdown selections map correctly to internal calculations

**Modular Design**:
- Separate icon generation modules for each hardware type
- Unified text rendering system accepting display_text parameter
- Parametric label base with configurable dimensions (no holes)
- Centralized fractional-to-decimal conversion for internal calculations only

**Function Separation**:
```
fraction_to_decimal(string) → decimal  // For internal calculations only
render_text(display_text) → 3D text   // Uses passed text parameter
create_single_label() → Complete label // Single label generation
label_content(type, thread, display_text, length_mm) // Handles all content rendering
```

### 10. Quality Assurance
**Icon Accuracy (v16.1 Critical Fixes)**:
- All bolt heads must be geometrically correct (round vs hex)
- Smooth circular holes in nuts (no polygonal artifacts)
- Proper washer representation (simple rings, no extraneous geometry)
- Correct socket patterns (hex for Allen, star for Torx, cross for Phillips)

**Dimensional Accuracy**: All measurements converted to millimeters for consistent internal calculations
- Thread specifications remain as strings for display
- Length calculations use converted millimeter values
- Icon scaling uses millimeter measurements

**Print Compatibility**:
- Minimum feature size: 0.4mm (nozzle width compatibility)
- No overhangs >45° without support
- Clean STL export without non-manifold surfaces
- Solid base design with no holes or cavities

**Dual-Color Registration**: Perfect alignment between base and content layers
- Shared coordinate system
- Consistent Z-height references
- No gaps or overlaps in dual-color printing
- High contrast default colors (white/black)

### 11. Error Prevention
**Common Pitfalls to Avoid**:
1. **Multiple Display Text Paths**: Always use dropdown strings directly
2. **Decimal Display**: Never show "0.75" instead of "3/4"
3. **Thread Order**: Machine screws (#4-40) before fractional (1/4-20)
4. **Quotation Marks**: Remove all `\"` from display text generation
5. **Inconsistent Parameters**: Ensure variable names match between functions
6. **Custom Text Ignored**: Always pass display_text through to render functions
7. **Polygonal Circles**: Use appropriate $fn values (32 for smooth, 6 for hex)

**Validation Requirements**:
- Verify fractional dropdown values convert correctly to millimeters
- Test that all 29 length options generate proper display text
- Confirm thread specification ordering in dropdown
- Validate icon scaling across full length range
- Ensure clean base geometry without holes
- Verify text fits within label boundaries for all thread/length combinations
- **Confirm custom_display_text overrides work for all hardware types**
- **Validate icon geometry matches physical hardware appearance**

### 12. Default Configuration
**Standard Settings**:
- Label size: Small (37.8mm length)
- Colors: White base (#FFFFFF) with black text (#000000)
- Text: Raised 0.3mm above base
- Font: Roboto Bold, size 3.5
- Thread: #4-40 (most common machine screw)
- Length: 3/4" (common fastener length)
- Hardware type: Button head screw

### 13. Version Control
**v16.2 Enhancements**:
- Increased default corner radius to 2.0mm for softer appearance
- Updated medium label length to 78.6mm (corrected dimension)
- Added optional side retention tabs for bin mounting:
  - Triangular tabs on left and right sides
  - Configurable count and size
  - Helps secure labels against bin walls
- Continuous bolt stem display (removed gap for long bolts)

**v16.1 Bug Fixes**:
- Fixed custom_display_text to work properly with nuts and washers
- Corrected standard washer icon (simple ring with smooth circles, restored side view)
- Fixed spring washer icon (smooth circular rings inside and out)
- Fixed nut icons to have smooth circular holes ($fn=32)
- Corrected all round-head bolts to display circular tops ($fn=32)
- Updated lock nut side profile to show rounded/domed top
- Changed "Phillips head bolt" to "Phillips head screw" in interface
- Changed "Button head bolt" to "Button head screw" in interface
- Removed gap/split display for long bolts (now shows continuous stem at max length)
- Ensured proper icon geometry for all hardware types
- Enhanced display_text parameter flow through all rendering functions

**v16 Original Features**:
- Fractional length dropdown interface (29 options)
- Batch all sizes generation mode
- Eliminated decimal display issues
- Changed default colors to white base/black text
- Removed mounting holes from base design
- Preserved thread ordering and quotation mark fixes

**Architecture Principles**:
- Single source of truth for display text
- Direct parameter selection via dropdowns
- Clean base design without attachment points
- Extensible icon system for future hardware types

## Implementation Considerations
- Prioritize dropdown string values over calculated values for display
- Use OpenSCAD's parametric capabilities for maximum flexibility
- Maintain icon accuracy matching real hardware appearance
- Support custom text overrides for specialized labeling needs
- Ensure high contrast visibility with default white/black color scheme
- Test all hardware type and custom text combinations thoroughly

## Implementation Notes and Lessons Learned

### Icon Design Philosophy
Icons represent the **actual physical appearance** of hardware when viewed from above (top view) and from the side (side view). This is critical:
- Round heads must be round because that's what you see looking down at a Phillips or socket head cap screw
- Hex heads must be hexagonal because that's their actual shape
- Washers are simple rings because that's their physical form
- The goal is immediate visual recognition matching the physical part

### Critical Code Patterns to Preserve

#### Button Head Side View Positioning
The button head bolt (screw) side view has been carefully calibrated over many iterations. The working pattern is:
```openscad
translate([head_x + 5, y_pos, z_pos]) {  // Note: +5, not +3
    linear_extrude(height = text_height) {
        intersection() {
            circle(d = 4);  // No $fn needed here
            translate([-2, -2]) square([2, 4]);
        }
    }
}
```
**DO NOT CHANGE** the positioning values without extensive testing.

#### $fn Values for Geometry
- **Smooth circles**: Always use `$fn = 32`
- **Hexagonal shapes**: Always use `$fn = 6` 
- **Default (no $fn)**: Only when the exact circle smoothness doesn't matter (e.g., for intersections)

#### Custom Text Field Architecture
Two separate custom text fields exist for different purposes:
- `custom_display_text`: Overrides auto-generated text for ANY hardware type while keeping the icon
- `custom_text_only`: Used ONLY when hardware_type is "Custom text" (no icon at all)

This separation allows users to:
1. Create standard hardware labels with custom text (e.g., "SAE" for a washer)
2. Create completely custom labels with no hardware icon

### Known Issues and Workarounds

#### Socket Head Countersunk 7-Sided Issue
Despite correct code (`$fn = 32` for outer cylinder), socket head countersunk may display with 7 sides in some OpenSCAD configurations. The code is correct; this appears to be a rendering issue. If encountered:
1. Force refresh with F5/F6
2. Check for global `$fn` overrides
3. Verify no other transformations are affecting the geometry

#### Function Naming vs UI Labels
Internal function names don't always match UI labels for historical reasons:
- Function: `button_bolt_icon()` → UI: "Button head screw"
- Function: `phillips_bolt_icon()` → UI: "Phillips head screw"

These function names are preserved to maintain code stability.

### Dimensional Discrepancies
- Label width: Code uses 11.7mm (measured/tested value) vs 11.5mm in original spec
- Both values work, but 11.7mm provides better text spacing
- The 37.8mm/79.6mm/113.4mm lengths are precisely calibrated for label maker tapes

### Testing Checklist for Future Modifications

Before accepting any icon changes, verify:
1. **Top view geometry**: Round items are round, hex items are hex
2. **Side view alignment**: Icons align properly with bolt stems
3. **Custom text flow**: Test with empty and filled custom_display_text
4. **Nuts/washers**: Verify they show thread spec when custom text is empty
5. **Long bolts**: Check that stems extend continuously to max_length (no gaps)
6. **Batch generation**: Ensure all 29 sizes generate correctly

### Common Mistakes to Avoid

1. **Converting fractional displays to decimal**: Always display "3/4" not "0.75"
2. **Breaking button head positioning**: The +5 offset is critical
3. **Missing side views**: Washers and nuts need side profile views
4. **Assuming all bolts are "bolts"**: Phillips and Button heads are "screws" in common usage
5. **Forgetting $fn for circles**: Undefined $fn can create unexpected polygons
6. **Ignoring display_text parameter**: Must flow through to render_text()

### Historical Context

#### Version Evolution
- **v15**: Had quotation marks in display, wrong thread ordering, decimal display issues
- **v16**: Fixed quotation marks, proper thread sort, fractional display, added batch mode
- **v16.1**: Fixed icon geometry, custom text handling, nomenclature (bolt vs screw)

#### Design Decisions
- **No mounting holes**: Removed for cleaner appearance and easier printing
- **White/black default**: Maximum contrast for readability
- **Raised text (0.3mm)**: Optimized for both visibility and print reliability
- **Small default size**: Most common for typical parts bins

### Future Modification Guidelines

When adding new hardware types:
1. Study similar existing icons for pattern consistency
2. Maintain separate top and side view components
3. Use consistent positioning relative to existing icons
4. Test with all three label sizes
5. Ensure text generation follows established patterns
6. Add to both single and batch mode dropdowns

When modifying existing icons:
1. Document WHY the change is needed
2. Test across all label sizes and lengths
3. Verify custom text still works
4. Check batch generation still functions
5. Compare before/after with multiple examples

### Critical Files and Functions

Key functions that should be modified with extreme caution:
- `bolt_stem()`: Core stem rendering, affects all bolts
- `label_content()`: Central routing for all content rendering  
- `render_text()`: Text positioning affects all labels
- `fraction_to_decimal()`: Must maintain all 29 conversions exactly

Parameters that cascade through the system:
- `display_text`: Must flow from main → create_single_label → label_content → render_text
- `length_mm`: Affects icon scaling and stem length
- `text_height`: Global affect on all raised elements

This specification ensures robust Imperial hardware label generation with accurate icon representations, flexible custom text options, and user-friendly fractional interfaces while maintaining clean, printable geometry optimized for dual-color 3D printing.
